openapi: 3.1.0
info:
  title: GoSignals Gateway
  version: "1.0.0"
servers:
  - url: https://gsa-api.gosignals-ai.workers.dev

paths:
  /core/metrics:
    get:
      operationId: coreMetrics
      summary: Get Core metrics (row counts)
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  moneyline_rows:
                    type: integer

  /core/latest-lines:
    get:
      operationId: coreLatestLines
      summary: Latest moneylines per game (best prices)
      parameters:
        - name: sport
          in: query
          required: false
          schema:
            type: string
            example: americanfootball_nfl
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            default: 20
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    sport_key: { type: string }
                    game_id: { type: string }
                    away_team: { type: string, nullable: true }
                    home_team: { type: string, nullable: true }
                    commence_time_utc: { type: string, format: date-time, nullable: true }
                    away_best_price: { type: integer, nullable: true }
                    away_book: { type: string, nullable: true }
                    home_best_price: { type: integer, nullable: true }
                    home_book: { type: string, nullable: true }

  /coach/summary:
    get:
      operationId: coachSummary
      summary: Human-readable summary of available games
      parameters:
        - name: league
          in: query
          required: false
          schema:
            type: string
            default: americanfootball_nfl
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            default: 20
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  summary: { type: string }
                  samples:
                    type: array
                    items:
                      type: object
                      properties:
                        matchup: { type: string }
                        away_best: { type: string }
                        home_best: { type: string }
                        kick: { type: string }

  /odds/sports/{sport}/odds:
    get:
      operationId: getOddsBySport
      summary: Get odds snapshot for a sport (supports on-demand refresh)
      parameters:
        - name: sport
          in: path
          required: true
          schema:
            type: string
            example: americanfootball_nfl
        - name: fresh
          in: query
          required: false
          schema:
            type: integer
            enum: [0, 1]
            default: 0
          description: "If 1, bypass cache and pull fresh data directly from Odds API."
        - name: warm
          in: query
          required: false
          schema:
            type: integer
            enum: [0, 1]
            default: 0
          description: "If 1, warm cache without forcing downstream analysis."
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  status: { type: string }
                  sport: { type: string }
                  timestamp: { type: string, format: date-time }
                  data_sources:
                    type: array
                    items: { type: string }
                  odds:
                    type: array
                    items:
                      type: object
                      properties:
                        game_id: { type: string }
                        home_team: { type: string }
                        away_team: { type: string }
                        home_price: { type: number }
                        away_price: { type: number }

  /__refresh:
    post:
      operationId: batchWarm
      summary: Batch warm selected endpoints in the gateway cache
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                endpoints:
                  type: array
                  items:
                    type: string
                  example:
                    - "/odds/sports/nfl/odds"
                    - "/odds/sports/nba/odds"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  status: { type: string }
                  warmed:
                    type: array
                    items: { type: string }
                  timestamp: { type: string, format: date-time }
                  notes: { type: string }
